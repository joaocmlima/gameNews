/**
 * @fileoverview added by tsickle
 * Generated from: pipes/storageUrl.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AsyncPipe } from '@angular/common';
import { ChangeDetectorRef, NgModule, Pipe } from '@angular/core';
import { AngularFireStorage } from '../storage';
/**
 * to be used with in combination with | async
 */
export class GetDownloadURLPipe {
    /**
     * @param {?} storage
     * @param {?} cdr
     */
    constructor(storage, cdr) {
        this.storage = storage;
        this.asyncPipe = new AsyncPipe(cdr);
    }
    /**
     * @param {?} path
     * @return {?}
     */
    transform(path) {
        if (path !== this.path) {
            this.path = path;
            this.downloadUrl$ = this.storage.ref(path).getDownloadURL();
        }
        return this.asyncPipe.transform(this.downloadUrl$);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.asyncPipe.ngOnDestroy();
    }
}
GetDownloadURLPipe.decorators = [
    { type: Pipe, args: [{
                name: 'getDownloadURL',
                pure: false,
            },] }
];
/** @nocollapse */
GetDownloadURLPipe.ctorParameters = () => [
    { type: AngularFireStorage },
    { type: ChangeDetectorRef }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    GetDownloadURLPipe.prototype.asyncPipe;
    /**
     * @type {?}
     * @private
     */
    GetDownloadURLPipe.prototype.path;
    /**
     * @type {?}
     * @private
     */
    GetDownloadURLPipe.prototype.downloadUrl$;
    /**
     * @type {?}
     * @private
     */
    GetDownloadURLPipe.prototype.storage;
}
export class GetDownloadURLPipeModule {
}
GetDownloadURLPipeModule.decorators = [
    { type: NgModule, args: [{
                declarations: [GetDownloadURLPipe],
                exports: [GetDownloadURLPipe],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZVVybC5waXBlLmpzIiwic291cmNlUm9vdCI6Ii93b3Jrc3BhY2Uvc3JjL3N0b3JhZ2UvIiwic291cmNlcyI6WyJwaXBlcy9zdG9yYWdlVXJsLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBYSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBRTVGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLFlBQVksQ0FBQzs7OztBQU9oRCxNQUFNLE9BQU8sa0JBQWtCOzs7OztJQU03QixZQUFvQixPQUEyQixFQUFFLEdBQXNCO1FBQW5ELFlBQU8sR0FBUCxPQUFPLENBQW9CO1FBQzdDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7Ozs7SUFFRCxTQUFTLENBQUMsSUFBWTtRQUNwQixJQUFJLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQ2pCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDN0Q7UUFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNyRCxDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7O1lBeEJGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsZ0JBQWdCO2dCQUN0QixJQUFJLEVBQUUsS0FBSzthQUNaOzs7O1lBTlEsa0JBQWtCO1lBRmxCLGlCQUFpQjs7Ozs7OztJQVd4Qix1Q0FBNkI7Ozs7O0lBQzdCLGtDQUFxQjs7Ozs7SUFDckIsMENBQXNDOzs7OztJQUUxQixxQ0FBbUM7O0FBc0JqRCxNQUFNLE9BQU8sd0JBQXdCOzs7WUFKcEMsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxDQUFFLGtCQUFrQixDQUFFO2dCQUNwQyxPQUFPLEVBQUUsQ0FBRSxrQkFBa0IsQ0FBRTthQUNoQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgTmdNb2R1bGUsIE9uRGVzdHJveSwgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQW5ndWxhckZpcmVTdG9yYWdlIH0gZnJvbSAnLi4vc3RvcmFnZSc7XG5cbi8qKiB0byBiZSB1c2VkIHdpdGggaW4gY29tYmluYXRpb24gd2l0aCB8IGFzeW5jICovXG5AUGlwZSh7XG4gIG5hbWU6ICdnZXREb3dubG9hZFVSTCcsXG4gIHB1cmU6IGZhbHNlLFxufSlcbmV4cG9ydCBjbGFzcyBHZXREb3dubG9hZFVSTFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtLCBPbkRlc3Ryb3kge1xuXG4gIHByaXZhdGUgYXN5bmNQaXBlOiBBc3luY1BpcGU7XG4gIHByaXZhdGUgcGF0aDogc3RyaW5nO1xuICBwcml2YXRlIGRvd25sb2FkVXJsJDogT2JzZXJ2YWJsZTxhbnk+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RvcmFnZTogQW5ndWxhckZpcmVTdG9yYWdlLCBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgdGhpcy5hc3luY1BpcGUgPSBuZXcgQXN5bmNQaXBlKGNkcik7XG4gIH1cblxuICB0cmFuc2Zvcm0ocGF0aDogc3RyaW5nKSB7XG4gICAgaWYgKHBhdGggIT09IHRoaXMucGF0aCkge1xuICAgICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICAgIHRoaXMuZG93bmxvYWRVcmwkID0gdGhpcy5zdG9yYWdlLnJlZihwYXRoKS5nZXREb3dubG9hZFVSTCgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5hc3luY1BpcGUudHJhbnNmb3JtKHRoaXMuZG93bmxvYWRVcmwkKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuYXN5bmNQaXBlLm5nT25EZXN0cm95KCk7XG4gIH1cblxufVxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFsgR2V0RG93bmxvYWRVUkxQaXBlIF0sXG4gIGV4cG9ydHM6IFsgR2V0RG93bmxvYWRVUkxQaXBlIF0sXG59KVxuZXhwb3J0IGNsYXNzIEdldERvd25sb2FkVVJMUGlwZU1vZHVsZSB7fVxuIl19